P.X = pnorm(q = 170, mean = 150, sd = 20, lower.tail = F)
P.X
P.X = 1-pnorm(1)
P.X
qnorm(0.1586)
-qnorm(0.1586)
mtcars %>%
ggplot() +
aes(wt, mpg) +
geom_point() +
xlab("Weight lbs") + ylab("Miles gallon")
mtcars %>%
ggplot() +
aes(wt, mpg) +
geom_point() +
xlab("Weight lbs") + ylab("Miles gallon")
library(tidyverse)
mtcars %>%
ggplot() +
aes(wt, mpg) +
geom_point() +
xlab("Weight lbs") + ylab("Miles gallon")
starwars
glimpse(starwars)
starwars %>%
ggplot() +
aes(skin_color, hair_color) +
geom_point() +
xlab("Weight lbs") + ylab("Miles gallon")
starwars %>%
ggplot() +
aes(mass, height) +
geom_point() +
xlab("Weight lbs") + ylab("Miles gallon")
starwars %>%
ggplot() +
aes(mass, height) +
geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
starwars %>%
ggplot(aes(mass, height)) +
geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
starwars %>%
ggplot(aes(hair_color, height)) +
geom_point() +
starwars %>%
ggplot(aes(hair_color, height)) +
geom_point()
starwars %>%
ggplot(aes(hair_color, height)) +
geom_point()
skimr::skim(starwars)
starwars %>%
ggplot(aes(sex, height)) +
geom_point()
starwars %>%
ggplot(aes(sex, height)) +
geom_jitter()
starwars %>%
ggplot(aes(sex, height)) +
geom_jitter(fill = sex)
starwars %>%
ggplot(aes(sex, height)) +
geom_jitter(color = sex)
starwars %>%
ggplot(aes(sex, height)) +
geom_jitter(color = starwars$sex)
starwars %>%
ggplot(aes(sex, height, fill = sex)) +
geom_jitter()
starwars %>%
ggplot(aes(sex, height )fill = sex) +
starwars %>%
ggplot(aes(sex, height) color = sex) +
starwars %>%
ggplot(aes(sex, height, color = sex) ) +
geom_jitter()
starwars %>%
ggplot(aes(sex, height, color = sex) ) +
geom_jitter() +
guides(fill = "none")
starwars %>%
ggplot(aes(sex, height, color = sex) ) +
geom_jitter() +
theme(legend.position="none")
starwars %>%
ggplot(aes(mass, height, fill = sex)) +
geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
starwars %>%
ggplot(aes(mass, height, color = sex)) +
geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
starwars %>%
ggplot(aes(sex, height, color = sex) ) +
geom_jitter(show.legend = NA)
diamonds %>%
ggplot(aes(carat)) +
geom_density()
starwars %>%
ggplot(aes(height)) +
geom_density()
starwars %>%
ggplot(aes(height)) +
geom_density()
skimr::skim(heights)
skimr::skim(height)
heights
data()
skimr::skim(population)
skimr::skim(who)
skimr::skim(diamonds)
diamonds %>%
ggplot(aes(price)) +
geom_density()
options(999)
options("999")
diamonds %>%
ggplot(aes(price)) +
geom_density()
option("999")
options(scipen=10000)
diamonds %>%
ggplot(aes(price)) +
geom_density()
skimr::skim(women)
women %>%
ggplot(aes(height)) +
geom_density()
women %>%
ggplot(aes(weight)) +
geom_density()
diamonds %>%
ggplot(aes(carat)) +
geom_density()
mean(correct_list)
p = 0.45
p = 0.45
n = 1000
B = 10000
correct_list = replicate(B, {
x = sample(c(1,0), size = n, replace = T, prob = c(p, (1-p)))
x_hat = mean(x)
se_hat = sqrt(x_hat * (1 - x_hat) / n)
between(p, x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat)
})
n = 1000
p = 0.45
n = 1000
B = 10000
correct_list = replicate(B, {
x = sample(c(1,0), size = n, replace = T, prob = c(p, (1-p)))
x_hat = mean(x)
se_hat = sqrt(x_hat * (1 - x_hat) / n)
between(p, x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat)
})
library(tidyverse)
p = 0.45
n = 1000
B = 10000
correct_list = replicate(B, {
x = sample(c(1,0), size = n, replace = T, prob = c(p, (1-p)))
x_hat = mean(x)
se_hat = sqrt(x_hat * (1 - x_hat) / n)
between(p, x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat)
})
mean(correct_list)
lower_bounds = c()
upper_bounds = c()
x_hats = c()
true = c()
for (i in 1:100) {
x = sample(c(1,0), size = n, replace = T, prob = c(p, (1-p)))
x_hat = mean(x)
x_hats = c(x_hats, x_hat)
se_hat = sqrt(x_hat * (1 - x_hat) / n)
lower_bounds = c(lower_bounds, (x_hat - 1.96 * se_hat))
upper_bounds = c(upper_bounds, (x_hat + 1.96 * se_hat))
true = c(true, between(p, x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat))
}
table = tibble(x_hats, lower_bounds, upper_bounds, true)
ggplot(table, aes(seq_along(x_hats), x_hats)) +
geom_pointrange(aes(ymin = lower_bounds, ymax = upper_bounds, color = true)) +
geom_hline(yintercept = 0.45)
# This model is in real life shrouded in unknowns.
x = sample(c(1,0), size = 1000, replace = T, prob = c(p, (1-p)))
# Sample mean
x_hat = mean(x)
# Standard Error
se_hat = sqrt(x_hat * (1 - x_hat) / n)
# Creating the bounds of the CI
lower_bounds = x_hat - 1.96 * se_hat
upper_bounds =x_hat + 1.96 * se_hat
# The confidence interval is:
lower_bounds
upper_bounds
population = runif(10000, min = 160, max = 225)
population = runif(10000, min = 160, max = 225)
population
head(population, 10)
mean(population)
population = runif(10000, min = 800, max = 6000)
head(population, 10)
mean(population)
hist(population)
plot(population)
plot(densitiy(population))
i
plot(density(population))
population = runif(10000, min = 800, max = 6000)
head(population, 10)
mean(population)
plot(density(population))
mu = mean(population)
incomes = runif(10000, min = 800, max = 6000)
head(incomes, 10)
mu = mean(incomes)
plot(density(incomes))
X = sample(incomes, 100)
x = sample(incomes, 100)
x_hat = mean(X)
se_hat = sd(x) / sqrt(100)
se_hat
lower_bound = x_hat - 1.96 * se_hat
upper_bound = x_hat + 1.96 * se_hat
lower_bound; upper_bound
set.seed(1)
set.seed(1)
incomes = runif(10000, min = 800, max = 6000)
head(incomes, 10)
mu = mean(incomes)
plot(density(incomes))
x = sample(incomes, 100)
x_hat = mean(X)
se_hat = sd(x) / sqrt(100)
lower_bound = x_hat - 1.96 * se_hat
upper_bound = x_hat + 1.96 * se_hat
lower_bound; upper_bound
x_hat
x_hat
mu
set.seed(1)
# Create 10000 random "incomes"
incomes = runif(10000, min = 800, max = 6000)
# Peek at it
head(incomes, 10)
# Create true population mean (unknown in real life)
mu = mean(incomes)
mu
# Plot reveals its very much unnormal
plot(density(incomes))
# Sample
x = sample(incomes, 100)
# Sample mean
x_hat = mean(X)
# Sample standard error
se_hat = sd(x) / sqrt(100)
# Create the margin of error
lower_bound = x_hat - 1.96 * se_hat
upper_bound = x_hat + 1.96 * se_hat
# Here is our confidence interval
lower_bound; upper_bound
# Here is the real population mean (unknown in real life)
mu
x_hat
t.test(x, conf.level = 0.95)
t.test(x, conf.level = 0.95)$conf.int
x_hat
sd(x)
x_hat
1.96 * se_hat
lower_bound
# Here is our confidence interval
lower_bound; upper_bound
z.test(x)
# Here is our confidence interval
c
mean(correct_list)
p = 0.45
n = 1000
B = 10000
set.seed(1)
correct_list = replicate(B, {
x = sample(c(1,0), size = n, replace = T, prob = c(p, (1-p)))
x_hat = mean(x)
se_hat = sqrt(x_hat * (1 - x_hat) / n)
between(p, x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat)
})
set.seed(1)
library(tidyverse)
p = 0.45
n = 1000
B = 10000
set.seed(1)
correct_list = replicate(B, {
x = sample(c(1,0), size = n, replace = T, prob = c(p, (1-p)))
x_hat = mean(x)
se_hat = sqrt(x_hat * (1 - x_hat) / n)
between(p, x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat)
})
mean(correct_list)
mean(correct_list)
# Used to create the graph
lower_bounds = c()
upper_bounds = c()
x_hats = c()
true = c()
# Small Monte Carlo simulation
for (i in 1:100) {
x = sample(c(1,0), size = n, replace = T, prob = c(p, (1-p)))
x_hat = mean(x)
x_hats = c(x_hats, x_hat)
se_hat = sqrt(x_hat * (1 - x_hat) / n)
lower_bounds = c(lower_bounds, (x_hat - 1.96 * se_hat))
upper_bounds = c(upper_bounds, (x_hat + 1.96 * se_hat))
true = c(true, between(p, x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat))
}
# ggplot2 only accepts tables
table = tibble(x_hats, lower_bounds, upper_bounds, true)
# Graph highlighting the validity of a 95% CI
ggplot(table, aes(seq_along(x_hats), x_hats)) +
geom_pointrange(aes(ymin = lower_bounds, ymax = upper_bounds, color = true)) +
geom_hline(yintercept = 0.45)
# Used to create the graph
lower_bounds = c()
upper_bounds = c()
x_hats = c()
true = c()
# Small Monte Carlo simulation
for (i in 1:100) {
x = sample(c(1,0), size = n, replace = T, prob = c(p, (1-p)))
x_hat = mean(x)
x_hats = c(x_hats, x_hat)
se_hat = sqrt(x_hat * (1 - x_hat) / n)
lower_bounds = c(lower_bounds, (x_hat - 1.96 * se_hat))
upper_bounds = c(upper_bounds, (x_hat + 1.96 * se_hat))
true = c(true, between(p, x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat))
}
# ggplot2 only accepts tables
table = tibble(x_hats, lower_bounds, upper_bounds, true)
# Graph highlighting the validity of a 95% CI
ggplot(table, aes(seq_along(x_hats), x_hats)) +
geom_pointrange(aes(ymin = lower_bounds, ymax = upper_bounds, color = true)) +
geom_hline(yintercept = 0.45)
# Used to create the graph
lower_bounds = c()
upper_bounds = c()
x_hats = c()
true = c()
# Small Monte Carlo simulation
for (i in 1:100) {
x = sample(c(1,0), size = n, replace = T, prob = c(p, (1-p)))
x_hat = mean(x)
x_hats = c(x_hats, x_hat)
se_hat = sqrt(x_hat * (1 - x_hat) / n)
lower_bounds = c(lower_bounds, (x_hat - 1.96 * se_hat))
upper_bounds = c(upper_bounds, (x_hat + 1.96 * se_hat))
true = c(true, between(p, x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat))
}
# ggplot2 only accepts tables
table = tibble(x_hats, lower_bounds, upper_bounds, true)
# Graph highlighting the validity of a 95% CI
ggplot(table, aes(seq_along(x_hats), x_hats)) +
geom_pointrange(aes(ymin = lower_bounds, ymax = upper_bounds, color = true)) +
geom_hline(yintercept = 0.45)
library(tidyverse)
B = 10000
x_bar_distribution = replicate(B, {
x = sample(c(1,0), size = n, replace = T, prob = c(p, (1-p)))
mean(x)
})
n = 100
p = 0.4
x = sample(c(1,0), size = n, replace = T, prob = c(p, (1-p)))
x_bar= mean(x)
x_bar
B = 10000
x_bar_distribution = replicate(B, {
x = sample(c(1,0), size = n, replace = T, prob = c(p, (1-p)))
mean(x)
})
head(x_bar_distribution)
wb_cachelist$indicators
library(wbstats)
library(wbstats)
wb_cachelist$indicators
wb_cachelist$topics
# result = wb_search("")
# result$indicator_desc
# Takes a long time to download
# data = wb_data("SP.POP.TOTL", start_date = 1960, end_date = 2020)
# Example visualization
# library(tidyverse)
# data$country
# data %>%
#   filter(country == "Germany") %>%
#   ggplot(aes(date, SP.POP.TOTL/1000000)) +
#   geom_line()
library(wbstats)
wb_cachelist$indicators
wb_cachelist$topics
# result = wb_search("")
# result$indicator_desc
# Takes a long time to download
data = wb_data("SP.POP.TOTL", start_date = 1960, end_date = 2020)
# Example visualization
data %>%
filter(country == "Germany") %>%
ggplot(aes(date, SP.POP.TOTL/1000000)) +
geom_line()
